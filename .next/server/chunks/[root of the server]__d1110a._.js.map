{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/dhruv/Desktop/ONDC/v10/app/api/GET/route.ts"],"sourcesContent":["// pages/api/products/index.ts\n\nimport { PrismaClient } from '@prisma/client';\nimport { NextResponse } from 'next/server';\n\nconst prisma = new PrismaClient();\n\nexport async function GET(req: Request) {\n  try {\n    const { sellerId } = await req.json();\n\n    // Fetch the products based on sellerId\n    const products = await prisma.product.findMany({\n      where: {\n        sellerId: parseInt(sellerId) || sellerId,\n      },\n      include: {\n        seller: true,\n        category: true,\n        reviews: true,\n        images: true,\n        variants: true,\n      },\n    });\n\n    // Return the fetched products\n    return NextResponse.json({ products }, { status: 200 });\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    return NextResponse.json({ error: 'Something went wrong', details: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAE9B;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,IAAI,GAAY;IACpC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAEnC,uCAAuC;QACvC,MAAM,WAAW,MAAM,OAAO,OAAO,CAAC,QAAQ,CAAC;YAC7C,OAAO;gBACL,UAAU,SAAS,aAAa;YAClC;YACA,SAAS;gBACP,QAAQ;gBACR,UAAU;gBACV,SAAS;gBACT,QAAQ;gBACR,UAAU;YACZ;QACF;QAEA,8BAA8B;QAC9B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAS,GAAG;YAAE,QAAQ;QAAI;IACvD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;YAAwB,SAAS,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACpG;AACF"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}