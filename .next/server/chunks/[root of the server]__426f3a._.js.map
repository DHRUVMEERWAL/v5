{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/dhruv/Desktop/ONDC/v10/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\n\nconst cloudName = \"dsqivztry\";\nconst apiKey = \"393596363896416\";\nconst apiSecret = \"SMGHSULS8JnRR6udnRy6Lkz2-II\";\n\nexport async function POST(request: Request) {\n  const formData = await request.formData()\n  const file = formData.get('file') as File\n\n  if (!file) {\n    return NextResponse.json({ error: 'No file uploaded' }, { status: 400 })\n  }\n\n  try {\n    const timestamp = Math.round((new Date).getTime() / 1000);\n    const signature = await generateSignature(timestamp);\n\n    const uploadFormData = new FormData();\n    uploadFormData.append('file', file);\n    uploadFormData.append('timestamp', timestamp.toString());\n    uploadFormData.append('api_key', apiKey);\n    uploadFormData.append('signature', signature);\n\n    const response = await fetch(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, {\n      method: 'POST',\n      body: uploadFormData\n    });\n\n    if (!response.ok) {\n      throw new Error('Upload failed');\n    }\n\n    const result = await response.json();\n    return NextResponse.json({ url: result.secure_url });\n  } catch (error) {\n    console.error('Server error:', error);\n    return NextResponse.json({ error: 'Server error' }, { status: 500 });\n  }\n}\n\nasync function generateSignature(timestamp: number): Promise<string> {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(`timestamp=${timestamp}${apiSecret}`);\n  const hashBuffer = await crypto.subtle.digest('SHA-1', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,YAAY;AAClB,MAAM,SAAS;AACf,MAAM,YAAY;AAEX,eAAe,KAAK,OAAgB;IACzC,MAAM,WAAW,MAAM,QAAQ,QAAQ;IACvC,MAAM,OAAO,SAAS,GAAG,CAAC;IAE1B,IAAI,CAAC,MAAM;QACT,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,IAAI;QACF,MAAM,YAAY,KAAK,KAAK,CAAC,CAAC,IAAI,IAAI,EAAE,OAAO,KAAK;QACpD,MAAM,YAAY,MAAM,kBAAkB;QAE1C,MAAM,iBAAiB,IAAI;QAC3B,eAAe,MAAM,CAAC,QAAQ;QAC9B,eAAe,MAAM,CAAC,aAAa,UAAU,QAAQ;QACrD,eAAe,MAAM,CAAC,WAAW;QACjC,eAAe,MAAM,CAAC,aAAa;QAEnC,MAAM,WAAW,MAAM,MAAM,CAAC,gCAAgC,EAAE,UAAU,aAAa,CAAC,EAAE;YACxF,QAAQ;YACR,MAAM;QACR;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,KAAK,OAAO,UAAU;QAAC;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF;AAEA,eAAe,kBAAkB,SAAiB;IAChD,MAAM,UAAU,IAAI;IACpB,MAAM,OAAO,QAAQ,MAAM,CAAC,CAAC,UAAU,EAAE,YAAY,WAAW;IAChE,MAAM,aAAa,MAAM,OAAO,MAAM,CAAC,MAAM,CAAC,SAAS;IACvD,MAAM,YAAY,MAAM,IAAI,CAAC,IAAI,WAAW;IAC5C,OAAO,UAAU,GAAG,CAAC,CAAA,IAAK,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,GAAG,MAAM,IAAI,CAAC;AAClE"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}