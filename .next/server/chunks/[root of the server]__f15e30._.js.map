{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/dhruv/Desktop/ONDC/v10/utils/cloudinary.ts"],"sourcesContent":["// utils/cloudinary.ts\nconst cloudinary = require('next-cloudinary');\nconst dotenv = require('dotenv');\n\n// Load environment variables\ndotenv.config();\n\n// Configure Cloudinary\ncloudinary.config({\n  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\n/**\n * Generates a signature for signed uploads.\n * @returns {Object} An object containing the signature and timestamp\n */\nexport const generateSignature = (): { signature: string; timestamp: number } => {\n  const timestamp = Math.round((new Date()).getTime() / 1000); // Current timestamp\n  const params = {\n    timestamp,\n    upload_preset: process.env.CLOUDINARY_UPLOAD_PRESET, // Use the preset from .env\n  };\n\n  // Generate the signature\n  const signature = cloudinary.utils.api_sign_request(params, process.env.CLOUDINARY_API_SECRET);\n  \n  return { signature, timestamp };\n};\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;AACtB,MAAM;AACN,MAAM;;;;;AAEN,6BAA6B;AAC7B,OAAO,MAAM;AAEb,uBAAuB;AACvB,WAAW,MAAM,CAAC;IAChB,UAAU;IACV,OAAO;IACP,YAAY,QAAQ,GAAG,CAAC,qBAAqB;AAC/C;AAMO,MAAM,oBAAoB;IAC/B,MAAM,YAAY,KAAK,KAAK,CAAC,AAAC,IAAI,OAAQ,OAAO,KAAK,OAAO,oBAAoB;IACjF,MAAM,SAAS;QACb;QACA,eAAe,QAAQ,GAAG,CAAC,wBAAwB;IACrD;IAEA,yBAAyB;IACzB,MAAM,YAAY,WAAW,KAAK,CAAC,gBAAgB,CAAC,QAAQ,QAAQ,GAAG,CAAC,qBAAqB;IAE7F,OAAO;QAAE;QAAW;IAAU;AAChC"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/dhruv/Desktop/ONDC/v10/app/api/products/%5Bid%5D/route.ts"],"sourcesContent":["// pages/api/generate-signature.ts\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { generateSignature } from '@/utils/cloudinary';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    const { signature, timestamp } = generateSignature();\n    res.status(200).json({ signature, timestamp });\n  } else {\n    res.status(405).json({ message: 'Method Not Allowed' });\n  }\n}\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;AAElC;;AAEe,SAAS,QAAQ,GAAmB,EAAE,GAAoB;IACvE,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,qHAAA,CAAA,oBAAiB,AAAD;QACjD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE;YAAW;QAAU;IAC9C,OAAO;QACL,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,SAAS;QAAqB;IACvD;AACF"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}