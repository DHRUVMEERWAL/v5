{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/dhruv/Desktop/ONDC/v10/app/api/POST/route.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\nimport { NextResponse } from 'next/server'\n\nconst prisma = new PrismaClient()\n\nexport async function POST(request) {\n  try {\n    const body = await request.json()\n    const {\n      name,\n      description,\n      price,\n      sku,\n      stockQuantity,\n      sellerId,\n      categoryId,\n      attributes,\n      createdAt,\n      updatedAt,\n    } = body\n\n    // Input validation\n    if (!name || !sku || !price || !sellerId || !categoryId) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 })\n    }\n\n    // Check if seller and category exist\n    const sellerExists = await prisma.seller.findUnique({ where: { id: sellerId } })\n    const categoryExists = await prisma.category.findUnique({ where: { id: categoryId } })\n\n    if (!sellerExists || !categoryExists) {\n      return NextResponse.json({ error: 'Invalid sellerId or categoryId' }, { status: 404 })\n    }\n\n    // Create the product\n    const newProduct = await prisma.product.create({\n      data: {\n        name,\n        description,\n        price,\n        sku,\n        stockQuantity,\n        sellerId,\n        categoryId,\n        attributes, // Stored as JSON\n        createdAt: createdAt ? new Date(createdAt) : undefined,\n        updatedAt: updatedAt ? new Date(updatedAt) : undefined,\n      },\n    })\n\n    return NextResponse.json(newProduct, { status: 201 })\n  } catch (error) {\n    console.error('Error creating product:', error)\n    return NextResponse.json(\n      { error: error.message || 'Error creating product' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EACJ,IAAI,EACJ,WAAW,EACX,KAAK,EACL,GAAG,EACH,aAAa,EACb,QAAQ,EACR,UAAU,EACV,UAAU,EACV,SAAS,EACT,SAAS,EACV,GAAG;QAEJ,mBAAmB;QACnB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY;YACvD,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,qCAAqC;QACrC,MAAM,eAAe,MAAM,OAAO,MAAM,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,IAAI;YAAS;QAAE;QAC9E,MAAM,iBAAiB,MAAM,OAAO,QAAQ,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE,IAAI;YAAW;QAAE;QAEpF,IAAI,CAAC,gBAAgB,CAAC,gBAAgB;YACpC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiC,GAAG;gBAAE,QAAQ;YAAI;QACtF;QAEA,qBAAqB;QACrB,MAAM,aAAa,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC7C,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,WAAW,YAAY,IAAI,KAAK,aAAa;gBAC7C,WAAW,YAAY,IAAI,KAAK,aAAa;YAC/C;QACF;QAEA,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAAyB,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}