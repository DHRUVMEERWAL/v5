{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/dhruv/Desktop/ONDC/v10/app/api/POST/route.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { NextResponse } from 'next/server';\n\nconst prisma = new PrismaClient();\nexport async function POST(request: Request) {\n  try {\n    console.log('Request Headers:', request.headers);\n\n    // Attempt to parse the request body\n    const body = await request.json();\n    console.log('Received Payload:', body);\n\n    // Extract fields\n    const {\n      name,\n      description,\n      price,\n      sku,\n      stockQuantity,\n      sellerId,\n      categoryId,\n      createdAt,\n      updatedAt,\n    } = body;\n\n    // Validate required fields\n    if (!name || !sku || price === undefined || !sellerId || !categoryId) {\n      console.error('Validation Error: Missing required fields');\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    // Check for related entities in the database\n    const sellerExists = await prisma.seller.findUnique({\n      where: { id: sellerId },\n    });\n    if (!sellerExists) {\n      console.error('Error: Seller not found');\n      return NextResponse.json(\n        { error: 'Seller not found' },\n        { status: 404 }\n      );\n    }\n\n    const categoryExists = await prisma.category.findUnique({\n      where: { id: categoryId },\n    });\n    if (!categoryExists) {\n      console.error('Error: Category not found');\n      return NextResponse.json(\n        { error: 'Category not found' },\n        { status: 404 }\n      );\n    }\n\n    // Attempt to create the product\n    const newProduct = await prisma.product.create({\n      data: {\n        name,\n        description,\n        price,\n        sku,\n        stockQuantity,\n        sellerId,\n        categoryId,\n        createdAt: createdAt ? new Date(createdAt) : undefined,\n        updatedAt: updatedAt ? new Date(updatedAt) : undefined,\n      },\n    });\n\n    console.log('Product Created:', newProduct);\n\n    return NextResponse.json(newProduct, { status: 201 });\n  } catch (error) {\n    console.error('Error Details:', error);\n    return NextResponse.json(\n      { error: 'Invalid JSON payload or internal server error' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AACxB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,QAAQ,GAAG,CAAC,oBAAoB,QAAQ,OAAO;QAE/C,oCAAoC;QACpC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,qBAAqB;QAEjC,iBAAiB;QACjB,MAAM,EACJ,IAAI,EACJ,WAAW,EACX,KAAK,EACL,GAAG,EACH,aAAa,EACb,QAAQ,EACR,UAAU,EACV,SAAS,EACT,SAAS,EACV,GAAG;QAEJ,2BAA2B;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,UAAU,aAAa,CAAC,YAAY,CAAC,YAAY;YACpE,QAAQ,KAAK,CAAC;YACd,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,6CAA6C;QAC7C,MAAM,eAAe,MAAM,OAAO,MAAM,CAAC,UAAU,CAAC;YAClD,OAAO;gBAAE,IAAI;YAAS;QACxB;QACA,IAAI,CAAC,cAAc;YACjB,QAAQ,KAAK,CAAC;YACd,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmB,GAC5B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,OAAO,QAAQ,CAAC,UAAU,CAAC;YACtD,OAAO;gBAAE,IAAI;YAAW;QAC1B;QACA,IAAI,CAAC,gBAAgB;YACnB,QAAQ,KAAK,CAAC;YACd,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,aAAa,MAAM,OAAO,OAAO,CAAC,MAAM,CAAC;YAC7C,MAAM;gBACJ;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,WAAW,YAAY,IAAI,KAAK,aAAa;gBAC7C,WAAW,YAAY,IAAI,KAAK,aAAa;YAC/C;QACF;QAEA,QAAQ,GAAG,CAAC,oBAAoB;QAEhC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CAAC,YAAY;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kBAAkB;QAChC,OAAO,+PAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgD,GACzD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}